#!/bin/sh

# Simple wrapper shell script for FTPL (faketime preload library)
# Thanks to Daniel Kahn Gillmor for improvement suggestions.

# It allows you to modify the date and time a program sees when using
# system library calls such as time() and fstat().

# This wrapper exposes only a small subset of the FTPL functionality.
# Please see FTPL's README file for more details

# Acknowledgment: Parts of the functionality of this wrapper have been
# inspired by Matthias Urlichs' datefudge 1.14.

CMD=${0##*/}

die () { echo "$*"; exit 1; }

version () {
    cat <<EOF
$CMD: Version 0.8"
For usage information please use '$CMD --help'."
EOF
    exit 0
}

help () {
    cat <<EOF

Usage: $CMD [switches] timestamp program arguments

This will run the specified 'program' with the given 'arguments'.
The program will be tricked into seeing the given 'timestamp' as its starting
date and time.  The clock will continue to run from this timestamp. Please see
the manpage (man faketime) for advanced options, such as stopping the wall
clock and make it run faster or slower.

The optional switches are:
  -m        : Use the multi-threaded version of libfaketime
  -f        : Use the advanced timestamp specification format (see manpage)

Examples:
$CMD 'last friday 5 pm' /bin/date
$CMD '2008-12-24 08:15:42' /bin/date
$CMD -f '+2,5y x10,0' /bin/bash -c 'date; while true; do echo \$SECONDS ; sleep 1 ; done'
$CMD -f '+2,5y x0,50' /bin/bash -c 'date; while true; do echo \$SECONDS ; sleep 1 ; done'
(Please note that it depends on your locale settings whether . or , has to be
used for fractions)

EOF
    exit 0
}

LIBNAME=libfaketime.so.1

# For Mac OS X users: Full path and name to libfaketime.dylib.1
MAC_FTPL_PATH=./libfaketime.dylib.1

DATE_CMD=date
USEDIRECT=false

# Parse any options
while true; do
    case $1 in
        (-h|-\?|--help) help ;;
        (-v|--version) version ;;
        (-m) LIBNAME=libfaketimeMT.so.1 ;;
        (-f) USEDIRECT=true ;;
        (--) shift; break ;;
        (*) break ;;
    esac
    shift
done

# With no arguments, show the help
[ -z "$1" ] && help

# Find the faketime library
if [ -z "$FTPL_PATH" ]; then
    bindir=${0%/*}
    pdir=${bindir%/*}
    # Find the library in various places
    for p in "$pdir"/lib/faketime "$pdir"/lib \
             /usr/local/lib/faketime /usr/local/lib \
             /usr/lib/faketime /usr/lib; do
        [ -f "$p/$LIBNAME" ] || continue
        FTPL_PATH=$p
        break
    done
fi
[ -n "$FTPL_PATH" ] || die "Failed to locate $LIBNAME"

# The next argument should be the offset.
offset=$1
shift

# Have USEDIRECT implicitly set when $offset begins with + or -, followed
# by number and not having 3 consecutive alphabet characters.
# This matches e.g. '-16hx2' but not '-3 weeks'.
case $offset in
    ([+-][0-9]*[A-Za-z][A-Za-z][A-Za-z]*) : not direct ;;
    ([+-][0-9]*) USEDIRECT=true ;;
esac

# Check whether we are on Mac OS X (Darwin)
if [ "$(uname)" = "Darwin" ] ; then
    DYLD_FORCE_FLAT_NAMESPACE=1
    DYLD_INSERT_LIBRARIES=$MAC_FTPL_PATH
    export DYLD_FORCE_FLAT_NAMESPACE DYLD_INSERT_LIBRARIES
    DATE_CMD=gdate
fi

###

# Setting FAKETIME ...
if $USEDIRECT; then
    FAKETIME=$offset
else
    seconds=$($DATE_CMD -d "$offset" '+%s') \
        || die "Error: Timestamp '$offset' not recognized, please re-try."

    offset=$(expr $seconds - $($DATE_CMD '+%s')) \
        || die "Error: Cannot calculate the faketime offset in seconds, please re-try."

    FAKETIME=$offset
    [ "$offset" -ge 0 ] && FAKETIME="+$FAKETIME"
fi

export FAKETIME

###

# Executing the user-specified command with the faketime library preloaded

LD_PRELOAD="${LD_PRELOAD:+$LD_PRELOAD:}$FTPL_PATH/$LIBNAME" exec "$@"
